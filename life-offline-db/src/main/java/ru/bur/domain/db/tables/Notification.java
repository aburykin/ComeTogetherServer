/*
 * This file is generated by jOOQ.
*/
package ru.bur.domain.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.bur.domain.db.BaseSchema;
import ru.bur.domain.db.Indexes;
import ru.bur.domain.db.Keys;
import ru.bur.domain.db.tables.records.NotificationRecord;


/**
 * Уведомления, пользователи проверяют эту таблицу на наличия уведомлений 
 * об изменении встреч.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notification extends TableImpl<NotificationRecord> {

    private static final long serialVersionUID = -505645275;

    /**
     * The reference instance of <code>base_schema.notification</code>
     */
    public static final Notification NOTIFICATION = new Notification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationRecord> getRecordType() {
        return NotificationRecord.class;
    }

    /**
     * The column <code>base_schema.notification.notification_id</code>.
     */
    public final TableField<NotificationRecord, Long> NOTIFICATION_ID = createField("notification_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('base_schema.notification_notification_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>base_schema.notification.app_user_id</code>. пользователь, который должен получить уведомление
     */
    public final TableField<NotificationRecord, Long> APP_USER_ID = createField("app_user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "пользователь, который должен получить уведомление");

    /**
     * The column <code>base_schema.notification.is_read</code>. true, если сообщение было прочитано пользователем.
     */
    public final TableField<NotificationRecord, Boolean> IS_READ = createField("is_read", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "true, если сообщение было прочитано пользователем.");

    /**
     * The column <code>base_schema.notification.message_text</code>. Текст уведомления
     */
    public final TableField<NotificationRecord, String> MESSAGE_TEXT = createField("message_text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "Текст уведомления");

    /**
     * The column <code>base_schema.notification.create_date</code>. Дата создания
     */
    public final TableField<NotificationRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("timezone('utc'::text, now())", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "Дата создания");

    /**
     * Create a <code>base_schema.notification</code> table reference
     */
    public Notification() {
        this(DSL.name("notification"), null);
    }

    /**
     * Create an aliased <code>base_schema.notification</code> table reference
     */
    public Notification(String alias) {
        this(DSL.name(alias), NOTIFICATION);
    }

    /**
     * Create an aliased <code>base_schema.notification</code> table reference
     */
    public Notification(Name alias) {
        this(alias, NOTIFICATION);
    }

    private Notification(Name alias, Table<NotificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notification(Name alias, Table<NotificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Уведомления, пользователи проверяют эту таблицу на наличия уведомлений об изменении встреч.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BaseSchema.BASE_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTIFICATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<NotificationRecord, Long> getIdentity() {
        return Keys.IDENTITY_NOTIFICATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NotificationRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NotificationRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationRecord>>asList(Keys.NOTIFICATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NotificationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotificationRecord, ?>>asList(Keys.NOTIFICATION__NOTIFICATIONS_HREF_APP_USER_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Notification as(String alias) {
        return new Notification(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Notification as(Name alias) {
        return new Notification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notification rename(String name) {
        return new Notification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notification rename(Name name) {
        return new Notification(name, null);
    }
}
