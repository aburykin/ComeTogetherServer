/*
 * This file is generated by jOOQ.
*/
package ru.bur.domain.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.bur.domain.db.BaseSchema;
import ru.bur.domain.db.Indexes;
import ru.bur.domain.db.Keys;
import ru.bur.domain.db.tables.records.MeetingRecord;


/**
 * Встречи
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Meeting extends TableImpl<MeetingRecord> {

    private static final long serialVersionUID = -1270207903;

    /**
     * The reference instance of <code>base_schema.meeting</code>
     */
    public static final Meeting MEETING = new Meeting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeetingRecord> getRecordType() {
        return MeetingRecord.class;
    }

    /**
     * The column <code>base_schema.meeting.meeting_id</code>.
     */
    public final TableField<MeetingRecord, Long> MEETING_ID = createField("meeting_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('base_schema.meeting_meeting_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>base_schema.meeting.name</code>.
     */
    public final TableField<MeetingRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>base_schema.meeting.place</code>.
     */
    public final TableField<MeetingRecord, String> PLACE = createField("place", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>base_schema.meeting.start_date</code>.
     */
    public final TableField<MeetingRecord, Timestamp> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>base_schema.meeting.description</code>.
     */
    public final TableField<MeetingRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>base_schema.meeting</code> table reference
     */
    public Meeting() {
        this(DSL.name("meeting"), null);
    }

    /**
     * Create an aliased <code>base_schema.meeting</code> table reference
     */
    public Meeting(String alias) {
        this(DSL.name(alias), MEETING);
    }

    /**
     * Create an aliased <code>base_schema.meeting</code> table reference
     */
    public Meeting(Name alias) {
        this(alias, MEETING);
    }

    private Meeting(Name alias, Table<MeetingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Meeting(Name alias, Table<MeetingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Встречи");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BaseSchema.BASE_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEETING_MEETING_ID_UINDEX, Indexes.MEETING_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MeetingRecord, Long> getIdentity() {
        return Keys.IDENTITY_MEETING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MeetingRecord> getPrimaryKey() {
        return Keys.MEETING_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MeetingRecord>> getKeys() {
        return Arrays.<UniqueKey<MeetingRecord>>asList(Keys.MEETING_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Meeting as(String alias) {
        return new Meeting(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Meeting as(Name alias) {
        return new Meeting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Meeting rename(String name) {
        return new Meeting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Meeting rename(Name name) {
        return new Meeting(name, null);
    }
}
